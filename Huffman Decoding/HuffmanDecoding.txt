("This code is contributed by Riyazul555")

// Time Complexity: O(N log N)  N is the size of the input file
// Space Complexity: O(N)       N is the size of the input file

// Include necessary libraries
include <fstream>
include <queue>
include <cstring>
include <algorithm>
include <map>

// Define maximum number of nodes
#define nMax 20005

// Namespace declaration
using namespace std;

// Depth-first search function to generate codewords
void dfs(int nod, string val, int G[nMax][2], string cod[nMax]) {
    // Base case: If leaf node, assign codeword and return
    if (G[nod][0] == -1) {
        cod[nod] = val;
        return;
    }
    
    // Recursive calls for left and right children
    dfs(G[nod][0], val + "0", G, cod);
    dfs(G[nod][1], val + "1", G, cod);
}

// Main function
int main(int argc, char* argv[]) {
    // Open input and output files
    ifstream fin(argv[1]);
    ofstream fout(argv[2]);
    
    // Declare variables
    int n, fr[nMax], val[nMax];
    
    // Read number of nodes from input
    fin >> n;
    fin.get();
    
    // Vector to store characters
    vector<char> v;
    
    // Comparator function for priority queue
    auto compare = [&fr, &val](int a, int b) { 
        return ((fr[a] > fr[b])  || (fr[a] == fr[b] && val[a] > val[b])); 
    };
    
    // Priority queue declaration with custom comparator
    priority_queue<int, vector<int>, decltype(compare)> Q(compare);
    
    // Read characters and frequencies, push into priority queue
    for(int i = 0; i < n; i++) {
        char ch;
        fin.get(ch);
        v.push_back(ch);
        fin >> fr[i];
        val[i] = i;
        Q.push(i);
        fin.get();
    }
    
    // Adjacency matrix initialization
    int G[nMax][2];
    for(int i = 0; i < 2; i++) {
        for(int j = 0; j < nMax; j++) {
            G[j][i] = -1;
        }
    }
    
    // Huffman coding algorithm
    int z = n - 1;
    while (Q.size() > 1) {
        int x = Q.top();
        Q.pop();
        int y = Q.top();
        Q.pop();
        z++;
        fr[z] = fr[x] + fr[y];
        val[z] = min(val[x], val[y]);
        Q.push(z);
        G[z][0] = x;
        G[z][1] = y;
    }
    
    // Generate codewords using DFS
    string cod[nMax] = {""};
    dfs(z, "", G, cod);
    
    // Read input string
    string s1, s2 = "";
    getline(fin, s1);
    
    // Decode input string using codewords
    for(int i = 0; i < s1.size(); i++) {
        s2 += s1[i];
        bool ok = 0;
        for(int j = 0; j < v.size() && !ok; j++) {
            if(s2 == cod[j]) {
                fout << v[j];
                s2 = "";
                ok = 1;
            }
        }
    }
    
    // Close files and return
    return 0;
}
